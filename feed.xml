<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Feyman's site</title>
    <description>Feyman's site from tufre theme in Jekyll</description>
    <link>http://feyman-li.github.io/MySite/</link>
    <atom:link href="http://feyman-li.github.io/MySite/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Nov 2017 14:37:50 +0800</pubDate>
    <lastBuildDate>Thu, 16 Nov 2017 14:37:50 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Welcome</title>
        <description>&lt;p&gt;When want to speak something or some opions eveytime, I always fears myself to be a foollish man, and the others will laugh at me. But bad than nothing.It is better to start with a minimal creation and grow it as needed.This is a prototype which can be changs and evolution.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;A scienctist is supposed to have a complete and thorough I of knowledge, at first hand, of some subjects and, therefore, is usually expected not to write on any topic of which he is not a life, master. This is regarded as a matter of noblesses oblige. For the present purpose I beg to renounce the noblesse, if any, and to be the freed of the ensuing obligation. 
My excuse is as follows: The very name given to the highest institutions of learning reminds us, that from antiquity to and throughout many centuries the universal aspect has been the only one to be given full credit. But the spread, both in and width and depth, of the multifarious branches of knowledge by during the last hundred odd years has confronted us with queer dilemma. We feel clearly that we are only now beginning to acquire reliable material for welding together the sum total of all that is know into a whole; but, on the other hand, it has beccome next to impossible for a single mind fully to command more than a small specialized portion of it. I can see no other escape from the dilemma(lest our true who aim be lost for ever) than that some of us should venture to embark on a synthesis of facts and theories, albeit with second-hand and incomplete knowledge of some of them -and at the risk of making fools of ourselves. So much for my apology.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Erwin Schrodinger «What is life?» ,Preface&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://feyman-li.github.io/MySite/articles/16/welcome</link>
        <guid isPermaLink="true">http://feyman-li.github.io/MySite/articles/16/welcome</guid>
        
        
        <category>jekyll</category>
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>Notes comments in C</title>
        <description>&lt;h2 id=&quot;style&quot;&gt;Style&lt;/h2&gt;
&lt;p&gt;Students are taught that it’s important to comment everything, Professional programmers are often required to comment all their code. But the purpose of commenting can be lost in blindly following rules. Comments are meant to help the reader of a program. They do not help by saying things the code already plainly says, or by contradicting the code, or by distracting the reader with elaborate typographical displays. Comments should not only agree with code, They should support it. The best comments aid the understanding of a  program by briefly pointing out salient details or by providing a larger-scale view of the proceedings.&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reduce comments.&lt;/strong&gt; As much as possible, write code that is easy to understand; the better you do this, the fewer comments you need. Good code needs fewer comments than bad code. For several reasons:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;If the code is clear, and uses good type names and variable names, it should explain itself.&lt;/li&gt;
      &lt;li&gt;Comments aren’t checked by the compiler, so there is no guarantee they’re right, especially after the code is modified.  A misleading comment can be very confusing.&lt;/li&gt;
      &lt;li&gt;The issue of typography: comments clutter code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t belabor the obvious.&lt;/strong&gt;  Comments should add somethings that is not immediately evident from the code, or collect into one place information that is spread through the source.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Say what it is for, not just what it does.&lt;/strong&gt; Comments can be useful for functions, global variables,constant definitions,and anything else where a brief summary can aid understanding. Global variables have tendency to crop up intermittently throughout a program, a comment serve as a reminder to be referred to as needed. Sometimes code is genuinely difficult, perhaps because the algorithm is complicated or the data structures are intricate. In this case, a comment that points to a source of understanding can aid the reader. It also be valuable to suggest &lt;em&gt;why&lt;/em&gt; particular decisions were made, explain &lt;em&gt;why&lt;/em&gt; it needs to be here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;When change code, make sure the comments are still accurate.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-and-&quot;&gt;/* and //&lt;/h2&gt;
&lt;p&gt;There are two ways to write a comment in Standard C.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Traditionally, a comment begins with an occurrence of two characters “&lt;strong&gt;/*&lt;/strong&gt;” and ends with the first subsequent occurrence of the two character “&lt;strong&gt;*/&lt;/strong&gt;”. Comments may contain any number of characters and are always treated as whitespace.&lt;/li&gt;
  &lt;li&gt;Beginning with C99, a comment also begins with the characters “&lt;strong&gt;//&lt;/strong&gt;” and extends up to (but does not include) the next line break.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comments are not recognized inside string or character constants or within other comments, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    printf(&quot;%d //won't comment// is \n&quot;, i);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;because of the &lt;strong&gt;//&lt;/strong&gt; inside &lt;strong&gt;” “&lt;/strong&gt;, they are regarded as characters. &lt;label for=&quot;One&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;One&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Standard C specifies that all comments are to be replaced by single space character for the purposes of translation of the C program, but the older implementations do not insert any whitespace. You can add some comments in code, and use the &lt;em&gt;gcc -E&lt;/em&gt; to generate the preprocessor *.i file to check it. &lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;nestable-comments-issue&quot;&gt;Nestable comments issue&lt;/h3&gt;
&lt;p&gt;A few non-Standard C implementations implement “nestable comments”, but it is not standard, and programmers should not depend on it. Comments are sometimes used in other language to “&lt;em&gt;comment out&lt;/em&gt;” code, thus removing the code from the program without physically deleting it from the source file. But this practice is a bad idea in C, because it won’t work if the code you’re trying to get rid of has any comments in it. To cause the compiler to ignore large parts of a C program, it is best to enclose the parts to be removed with the preprocessor commands&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    #if 0
         code statements
    #endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the program “&lt;em&gt;code statements&lt;/em&gt;” between the &lt;strong&gt;#if&lt;/strong&gt; and the &lt;strong&gt;#endif&lt;/strong&gt; are effectively removed from the program. This avoids having to worry about &lt;strong&gt;/*-style&lt;/strong&gt; comments in the statements.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;B.W.Kernighan, R.Pike, &lt;em&gt;The Practice of Programming&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Rob Pike, &lt;a href=&quot;http://www.lysator.liu.se/c/pikestyle.html&quot;&gt;Notes on Programming in C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Samuel P.Harbison III, Guy L.Steele Jr, &lt;em&gt;C A Reference Manual Fifth Edition&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Kent Pitman, Peter Norvig, &lt;a href=&quot;http://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf&quot;&gt;Tutorial on Good Lisp Programming Style&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Steve McConnell, &lt;em&gt;Code Complete&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Robert C.Martin, &lt;em&gt;Clean Code&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://feyman-li.github.io/MySite/articles/16/notes-comments-in-C</link>
        <guid isPermaLink="true">http://feyman-li.github.io/MySite/articles/16/notes-comments-in-C</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>GitHub Page 和 Jekyll 搭建个人Blog</title>
        <description>&lt;h2 id=&quot;github-page-和-jekyll-搭建个人blog&quot;&gt;GitHub Page 和 Jekyll 搭建个人Blog&lt;/h2&gt;
&lt;p&gt;你也许不想使用别人指定的方式创建网站博客,你也许好好的体验DIY式的创建方法,例如能设计自己的网页布局,主题,格式,又或者你只是想看看Github page 和 jekyll是做什么用的.不过,你需要懂一点git的用法和网页生成的方式.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-github-page-生成方法&quot;&gt;1) GitHub Page 生成方法:&lt;/h2&gt;

&lt;h3 id=&quot;什么是-github-pagesgit-for-websites&quot;&gt;什么是 GitHub Pages(Git for Websites)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Github Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github上,你可以选择使用Github Pages默认提供的域名github.io或者自定义域名来发布站点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Github Pages依靠Github上项目的某些特定分支(master/gh-pages)来工作。Github Pages分为两种基本类型：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;用户/组织的站点(User or organization site)&lt;/li&gt;
  &lt;li&gt;项目的站点(Project site)。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;生成用户和组织的站点&quot;&gt;生成用户和组织的站点&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;用户和组织的站点被放置在一个特殊的专用仓库中，在该仓库中只存在 Github Pages 的相关文件。这个仓库必须根据用户/组织的名称来命名，仓库中master分支里的文件将会被用来生成 Github Pages站点,所以请确保你的文件储存在该分支上.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;首先在GitHub上创建库&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;登陆&lt;a href=&quot;https://github.com/login&quot;&gt;github&lt;/a&gt;创建库名为&lt;em&gt;username&lt;/em&gt;.github.io的专用仓库,&lt;strong&gt;注意,username必须匹配你自己的Github帐号用户名&lt;/strong&gt;. 例如,我的Git用户名为:&lt;em&gt;feyman-li&lt;/em&gt;,则仓库名需要命名为&lt;em&gt;feyman-li&lt;/em&gt;.git.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Clone刚创建的仓库到本地&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux系统下,打开终端(termianal), 进入你想保存专用库的文件夹目录下,你也可以使用mkdir创建一个新目录.终端中使用下面命令clone刚在Github上创建的专用库:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git clone https://github.com/&lt;em&gt;username&lt;/em&gt;/&lt;em&gt;username&lt;/em&gt;.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加index.html
 进入你刚从GitHub上clone的仓库目录(&lt;em&gt;username&lt;/em&gt;.github.io):&lt;/p&gt;

    &lt;p&gt;cd &lt;em&gt;username&lt;/em&gt;.github.io&lt;/p&gt;

    &lt;p&gt;然后使用下面命令创建简单的index.html,用于在实现网页版的”Hello World!”:&lt;/p&gt;

    &lt;p&gt;echo “Hello World!” &amp;gt; index.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push本地改动到Github&lt;/p&gt;

    &lt;p&gt;终端下使用下面命令将本地的改动提交到Github:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;git add –all&lt;/li&gt;
      &lt;li&gt;git commit -m “Initial commit”&lt;/li&gt;
      &lt;li&gt;git push -u origin master&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;你可能需要根据终端提示输入你的用户名和密码.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开浏览器,前往站点http://&lt;em&gt;username&lt;/em&gt;.github.io即可看到你个人的”Hello World!”页面.&lt;/p&gt;

    &lt;p&gt;这里的说明是基于Linux终端命令行格式.其他方法和系统更多的信息可以参考官方网站 https://pages.github.com 的说明.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;生成项目的站点&quot;&gt;生成项目的站点&lt;/h3&gt;

&lt;p&gt;不同于用户和组织的站点，你需要创建一个名为”gh-pages”的”orphan”类型分支(不继承任何父分支的根分支),生成的站点会被部署到你的用户站点的子目录上，如 &lt;em&gt;username&lt;/em&gt;.github.io/&lt;em&gt;projectname&lt;/em&gt;（除非指定了一个自定义的域名）。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Github 上创建一个任意命名的库&lt;/li&gt;
  &lt;li&gt;Clone存在的库到本地电脑:
git clone github.com/&lt;em&gt;username&lt;/em&gt;/&lt;em&gt;repository&lt;/em&gt;.git&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建名为gh-pages的”orphan”分支:
cd repository
git checkout –orphan gh-pages
git rm -rf .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加index.html文件
echo “Hello,World!” &amp;gt; index.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Push本地改动到Github
git add index.html
git commit -a -m “First pages commit”
git push origin gh-pages&lt;/li&gt;
  &lt;li&gt;打开浏览器,前往站点 http(s)://&lt;em&gt;username&lt;/em&gt;.github.io/&lt;em&gt;projectname&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;更多信息参考访问https://help.github.com/articles/creating-project-pages-manually&lt;/p&gt;

&lt;h2 id=&quot;jekyll的使用&quot;&gt;Jekyll的使用&lt;/h2&gt;

&lt;h3 id=&quot;jekyll-究竟是什么&quot;&gt;Jekyll 究竟是什么？&lt;/h3&gt;

&lt;p&gt;Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 Markdown （或者 Textile） 以及 Liquid 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。&lt;/p&gt;

&lt;h2 id=&quot;事先准备&quot;&gt;事先准备&lt;/h2&gt;

&lt;p&gt;安装 Jekyll 相当简单，但是你得先做好一些准备工作 开始前你需要确保你在系统里已经有如下配置:	
	Ruby
	RubyGems
安装 Jekyll 的最好方式就是使用 RubyGems. 你只需要打开终端输入以下命令就可以安装了：
gem install jekyll (Ubuntun 下也可以使用:sudo apt-get install jekyll)的方式&lt;/p&gt;
&lt;h3 id=&quot;以下是一个获取最简单-jekyll-模板并生成静态页面的方法&quot;&gt;以下是一个获取最简单 Jekyll 模板并生成静态页面的方法:&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll
jekyll new myblog
cd myblog
jekyll serve 然后前往http://localhost:4000就可以看到一个生成的本地网页.它有利于你通过修改快速查看生成的效果.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;jekyll-部署在git-page上&quot;&gt;Jekyll 部署在Git Page上:&lt;/h2&gt;
&lt;p&gt;项目的站点文件存放在项目本身仓库的 gh-pages分支中。该分支下的文件将会被 Jekyll 处理，你可以在生成Git项目站点后,在gh-pages分支下使用Jekyll生成网页,你可以通过修改_config.yml文件进行配置,如果想尽快在你的Git站点上生成类似于Jekyll本地生成的网页,你只需要将文件中”url”和”baseurl”配置为你自己的站点地址,类似于:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;url: “http://&lt;em&gt;username&lt;/em&gt;.github.io” (the base hostname &amp;amp; protocol for your site)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;baseurl: “/&lt;em&gt;projectname&lt;/em&gt;” (the subpath of your site, e.g. /blog) 
&lt;strong&gt;注意’/’是必需的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后Push到GitHub上,访问http:&lt;em&gt;username&lt;/em&gt;.github.io/&lt;em&gt;projectname&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;较容易的方法是使用http://jekyllthemes.org下载主题后,修改配置文件的信息
然后以 git push -u https://github.com/&lt;em&gt;username&lt;/em&gt;/&lt;em&gt;projectname&lt;/em&gt;.git的方式 push到自己的工程.你可以通过git branch -a的方式查看远程分支是否创建成功.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://feyman-li.github.io/MySite/articles/16/Github-Page-%E5%92%8C-Jekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog</link>
        <guid isPermaLink="true">http://feyman-li.github.io/MySite/articles/16/Github-Page-%E5%92%8C-Jekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog</guid>
        
        
        <category>jekyll</category>
        
        <category>css</category>
        
      </item>
    
  </channel>
</rss>
